{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token_",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "merkleRoot_",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Claimed",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes32[]",
          "name": "merkleProof",
          "type": "bytes32[]"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "isClaimed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "merkleRoot",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xb11509da90b4caf0ccc9f43bc3dcd585db90ee96ccdb4ec8e75e6d1d3b6456d5",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "433898",
    "logsBloom": "0x
    "blockHash": "0xe45cd843e36687b87af0d82c0b82e4331cd9eb1c6219bc336061954853958054",
    "transactionHash": "0xb11509da90b4caf0ccc9f43bc3dcd585db90ee96ccdb4ec8e75e6d1d3b6456d5",
    "logs": [],
    "blockNumber": 2,
    "cumulativeGasUsed": "433898",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "0x7303fa15df153525f19bfb1cd9db0b88db7b738b30ce4f69dd955327500432df"
  ],
  "solcInputHash": "056c892239ca3f579c6f2c0389f88f32",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"merkleRoot_\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof\",\"type\":\"bytes32[]\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"isClaimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"merkleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"isClaimed(uint256)\":{\"details\":\"Returns true if the claim at the given index in the merkle tree has already been made.\",\"params\":{\"index\":\"The index into the merkle tree.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TokenDistributor.sol\":\"TokenDistributor\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xc1452b054778f1926419196ef12ae200758a4ee728df69ae1cd13e5c16ca7df7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Trees proofs.\\n *\\n * The proofs can be generated using the JavaScript library\\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\\n *\\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merklee tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            bytes32 proofElement = proof[i];\\n            if (computedHash <= proofElement) {\\n                // Hash(current computed hash + current element of the proof)\\n                computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\\n            } else {\\n                // Hash(current element of the proof + current computed hash)\\n                computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\\n            }\\n        }\\n        return computedHash;\\n    }\\n}\\n\",\"keccak256\":\"0x972240f593e01b2fae2e90c5b94260f4971f03076363a38a3f4fff105efbba8b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/BitMaps.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/structs/BitMaps.sol)\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing uint256 to bool mapping in a compact and efficient way, providing the keys are sequential.\\n * Largelly inspired by Uniswap's https://github.com/Uniswap/merkle-distributor/blob/master/contracts/MerkleDistributor.sol[merkle-distributor].\\n */\\nlibrary BitMaps {\\n    struct BitMap {\\n        mapping(uint256 => uint256) _data;\\n    }\\n\\n    /**\\n     * @dev Returns whether the bit at `index` is set.\\n     */\\n    function get(BitMap storage bitmap, uint256 index) internal view returns (bool) {\\n        uint256 bucket = index >> 8;\\n        uint256 mask = 1 << (index & 0xff);\\n        return bitmap._data[bucket] & mask != 0;\\n    }\\n\\n    /**\\n     * @dev Sets the bit at `index` to the boolean `value`.\\n     */\\n    function setTo(\\n        BitMap storage bitmap,\\n        uint256 index,\\n        bool value\\n    ) internal {\\n        if (value) {\\n            set(bitmap, index);\\n        } else {\\n            unset(bitmap, index);\\n        }\\n    }\\n\\n    /**\\n     * @dev Sets the bit at `index`.\\n     */\\n    function set(BitMap storage bitmap, uint256 index) internal {\\n        uint256 bucket = index >> 8;\\n        uint256 mask = 1 << (index & 0xff);\\n        bitmap._data[bucket] |= mask;\\n    }\\n\\n    /**\\n     * @dev Unsets the bit at `index`.\\n     */\\n    function unset(BitMap storage bitmap, uint256 index) internal {\\n        uint256 bucket = index >> 8;\\n        uint256 mask = 1 << (index & 0xff);\\n        bitmap._data[bucket] &= ~mask;\\n    }\\n}\\n\",\"keccak256\":\"0x15c88e5235214e695e424bfdff9c0a21d88744cbf1d93723d87954ebdb407dfa\",\"license\":\"MIT\"},\"contracts/TokenDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/BitMaps.sol\\\";\\n\\ncontract TokenDistributor {\\n    using BitMaps for BitMaps.BitMap;\\n\\n    address public token;\\n    bytes32 public merkleRoot;\\n\\n    BitMaps.BitMap private claimed;\\n\\n    // This event is triggered whenever a call to #claim succeeds.\\n    event Claimed(uint256 index, address account, uint256 amount);\\n\\n    constructor(address token_, bytes32 merkleRoot_) {\\n        token = token_;\\n        merkleRoot = merkleRoot_;\\n    }\\n\\n    /**\\n     * @dev Returns true if the claim at the given index in the merkle tree has already been made.\\n     * @param index The index into the merkle tree.\\n     */\\n    function isClaimed(uint256 index) public view returns (bool) {\\n        return claimed.get(index);\\n    }\\n\\n    function claim(\\n        uint256 index,\\n        address account,\\n        uint256 amount,\\n        bytes32[] calldata merkleProof\\n    ) external {\\n        require(\\n            !isClaimed(index),\\n            \\\"PubTokenDistributor: Drop already claimed.\\\"\\n        );\\n        // Verify the merkle proof.\\n        bytes32 node = keccak256(abi.encodePacked(index, account, amount));\\n        require(\\n            MerkleProof.verify(merkleProof, merkleRoot, node),\\n            \\\"PubTokenDistributor: Invalid proof.\\\"\\n        );\\n        // Mark it claimed and send the token.\\n        claimed.set(index);\\n        require(\\n            IERC20(token).transfer(account, amount),\\n            \\\"PubTokenDistributor: Transfer failed.\\\"\\n        );\\n        emit Claimed(index, account, amount);\\n    }\\n}\\n\",\"keccak256\":\"0xf1674236bbeb9aa53c9bd948b105d8400d3457d7ecc6358fe362f72d9cc001e0\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506040516106ac3803806106ac83398101604081905261002f91610058565b600080546001600160a01b0319166001600160a01b039390931692909217909155600155610090565b6000806040838503121561006a578182fd5b82516001600160a01b0381168114610080578283fd5b6020939093015192949293505050565b61060d8061009f6000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80632e7ba6ef146100515780632eb4a7ab146100665780639e34070f14610082578063fc0c546a146100c4575b600080fd5b61006461005f366004610511565b6100ef565b005b61006f60015481565b6040519081526020015b60405180910390f35b6100b46100903660046104f9565b600881901c600090815260026020526040812054600160ff84161b16151592915050565b6040519015158152602001610079565b6000546100d7906001600160a01b031681565b6040516001600160a01b039091168152602001610079565b600885901c600090815260026020526040902054600160ff87161b16156101835760405162461bcd60e51b815260206004820152602a60248201527f507562546f6b656e4469737472696275746f723a2044726f7020616c7265616460448201527f7920636c61696d65642e0000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b60408051602081018790526bffffffffffffffffffffffff19606087901b16918101919091526054810184905260009060740160405160208183030381529060405280519060200120905061020f838380806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250506001549150849050610402565b6102815760405162461bcd60e51b815260206004820152602360248201527f507562546f6b656e4469737472696275746f723a20496e76616c69642070726f60448201527f6f662e0000000000000000000000000000000000000000000000000000000000606482015260840161017a565b600886901c60009081526002602052604090208054600160ff89161b1790556000546040517fa9059cbb0000000000000000000000000000000000000000000000000000000081526001600160a01b038781166004830152602482018790529091169063a9059cbb90604401602060405180830381600087803b15801561030757600080fd5b505af115801561031b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061033f91906104d2565b6103b15760405162461bcd60e51b815260206004820152602560248201527f507562546f6b656e4469737472696275746f723a205472616e7366657220666160448201527f696c65642e000000000000000000000000000000000000000000000000000000606482015260840161017a565b604080518781526001600160a01b03871660208201529081018590527f4ec90e965519d92681267467f775ada5bd214aa92c0dc93d90a5e880ce9ed0269060600160405180910390a1505050505050565b60008261040f8584610418565b14949350505050565b600081815b84518110156104ca57600085828151811061044857634e487b7160e01b600052603260045260246000fd5b6020026020010151905080831161048a5760408051602081018590529081018290526060016040516020818303038152906040528051906020012092506104b7565b60408051602081018390529081018490526060016040516020818303038152906040528051906020012092505b50806104c2816105b0565b91505061041d565b509392505050565b6000602082840312156104e3578081fd5b815180151581146104f2578182fd5b9392505050565b60006020828403121561050a578081fd5b5035919050565b600080600080600060808688031215610528578081fd5b8535945060208601356001600160a01b0381168114610545578182fd5b935060408601359250606086013567ffffffffffffffff80821115610568578283fd5b818801915088601f83011261057b578283fd5b813581811115610589578384fd5b8960208260051b850101111561059d578384fd5b9699959850939650602001949392505050565b60006000198214156105d057634e487b7160e01b81526011600452602481fd5b506001019056fea2646970667358221220ff398267423cac8e95b9dd45bcf6043ebbafe56762255460806fea71ade75aa864736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061004c5760003560e01c80632e7ba6ef146100515780632eb4a7ab146100665780639e34070f14610082578063fc0c546a146100c4575b600080fd5b61006461005f366004610511565b6100ef565b005b61006f60015481565b6040519081526020015b60405180910390f35b6100b46100903660046104f9565b600881901c600090815260026020526040812054600160ff84161b16151592915050565b6040519015158152602001610079565b6000546100d7906001600160a01b031681565b6040516001600160a01b039091168152602001610079565b600885901c600090815260026020526040902054600160ff87161b16156101835760405162461bcd60e51b815260206004820152602a60248201527f507562546f6b656e4469737472696275746f723a2044726f7020616c7265616460448201527f7920636c61696d65642e0000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b60408051602081018790526bffffffffffffffffffffffff19606087901b16918101919091526054810184905260009060740160405160208183030381529060405280519060200120905061020f838380806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250506001549150849050610402565b6102815760405162461bcd60e51b815260206004820152602360248201527f507562546f6b656e4469737472696275746f723a20496e76616c69642070726f60448201527f6f662e0000000000000000000000000000000000000000000000000000000000606482015260840161017a565b600886901c60009081526002602052604090208054600160ff89161b1790556000546040517fa9059cbb0000000000000000000000000000000000000000000000000000000081526001600160a01b038781166004830152602482018790529091169063a9059cbb90604401602060405180830381600087803b15801561030757600080fd5b505af115801561031b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061033f91906104d2565b6103b15760405162461bcd60e51b815260206004820152602560248201527f507562546f6b656e4469737472696275746f723a205472616e7366657220666160448201527f696c65642e000000000000000000000000000000000000000000000000000000606482015260840161017a565b604080518781526001600160a01b03871660208201529081018590527f4ec90e965519d92681267467f775ada5bd214aa92c0dc93d90a5e880ce9ed0269060600160405180910390a1505050505050565b60008261040f8584610418565b14949350505050565b600081815b84518110156104ca57600085828151811061044857634e487b7160e01b600052603260045260246000fd5b6020026020010151905080831161048a5760408051602081018590529081018290526060016040516020818303038152906040528051906020012092506104b7565b60408051602081018390529081018490526060016040516020818303038152906040528051906020012092505b50806104c2816105b0565b91505061041d565b509392505050565b6000602082840312156104e3578081fd5b815180151581146104f2578182fd5b9392505050565b60006020828403121561050a578081fd5b5035919050565b600080600080600060808688031215610528578081fd5b8535945060208601356001600160a01b0381168114610545578182fd5b935060408601359250606086013567ffffffffffffffff80821115610568578283fd5b818801915088601f83011261057b578283fd5b813581811115610589578384fd5b8960208260051b850101111561059d578384fd5b9699959850939650602001949392505050565b60006000198214156105d057634e487b7160e01b81526011600452602481fd5b506001019056fea2646970667358221220ff398267423cac8e95b9dd45bcf6043ebbafe56762255460806fea71ade75aa864736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "isClaimed(uint256)": {
        "details": "Returns true if the claim at the given index in the merkle tree has already been made.",
        "params": {
          "index": "The index into the merkle tree."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 929,
        "contract": "contracts/TokenDistributor.sol:TokenDistributor",
        "label": "token",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 931,
        "contract": "contracts/TokenDistributor.sol:TokenDistributor",
        "label": "merkleRoot",
        "offset": 0,
        "slot": "1",
        "type": "t_bytes32"
      },
      {
        "astId": 934,
        "contract": "contracts/TokenDistributor.sol:TokenDistributor",
        "label": "claimed",
        "offset": 0,
        "slot": "2",
        "type": "t_struct(BitMap)766_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(BitMap)766_storage": {
        "encoding": "inplace",
        "label": "struct BitMaps.BitMap",
        "members": [
          {
            "astId": 765,
            "contract": "contracts/TokenDistributor.sol:TokenDistributor",
            "label": "_data",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_uint256,t_uint256)"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}